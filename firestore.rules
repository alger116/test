rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Helper function to check if user has specific permission
    function hasPermission(permission) {
      let userData = getUserData();
      return userData.customPermissions.formManagement[permission] == true;
    }

    // Helper function to check if user is main admin
    function isMainAdmin() {
      return isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isMainAdmin());
      allow create: if isAuthenticated() && isMainAdmin();
      allow update, delete: if isAuthenticated() && isMainAdmin();
      
      // Add rules for pdfs subcollection
      match /pdfs/{pdfId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isMainAdmin());
        allow create, update, delete: if isAuthenticated() && (request.auth.uid == userId || isMainAdmin());
      }
      
      // Add rules for savedSearches subcollection
      match /savedSearches/{searchId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isMainAdmin());
        allow create, update, delete: if isAuthenticated() && (request.auth.uid == userId || isMainAdmin());
      }
    }

    // Audit Log collection
    match /auditLog/{logId} {
      allow read: if isAuthenticated() && isMainAdmin();
      allow create: if isAuthenticated() && isMainAdmin();
      allow update, delete: if false; // Prevent updates and deletes
    }

    // System settings
    match /system/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // API keys
    match /apiKeys/{keyId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Email templates
    match /emailTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Document templates
    match /documentTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Workflows
    match /workflows/{workflowId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Permissions
    match /permissions/{permissionId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Expiration rules
    match /expirationRules/{ruleId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.sharedWith[request.auth.uid] == true ||
        getUserData().role == 'mainAdmin'
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        getUserData().role == 'mainAdmin'
      );
    }

    // Error logs
    match /errorLogs/{logId} {
      allow read, write: if isAuthenticated() && getUserData().role == 'mainAdmin';
    }
    
    // Settings collection
    match /settings/{settingId} {
      allow read: if isAuthenticated();  // Any authenticated user can read settings
      allow write: if 
        ((settingId == "maintenance" || settingId == "procurement") && getUserData().role == 'mainAdmin') ||  // Both admin and mainAdmin can write these
        (settingId == "sessionTimeout" && getUserData().role == 'mainAdmin');  // Only mainAdmin can write session timeout
    }
    
    // Procurements collection
    match /procurements/{procurementId} {
      allow read, write: if getUserData().role == 'mainAdmin';
    }

    // Statistika kollektsioonid ja OM komponendid
    
    // Põhiväljad
    match /omStandardFields/{fieldId} {
      allow read: if true;  // Kõik võivad lugeda
      allow write: if getUserData().role == 'mainAdmin';  // Ainult mainadmin võib muuta
    }

    // Peatükid
    match /omSections/{sectionId} {
      allow read: if true;
      allow write: if getUserData().role == 'mainAdmin';
      
      match /options/{optionId} {
        allow read: if true;
        allow write: if getUserData().role == 'mainAdmin';
      }
    }

    // Näidistingimused
    match /omTemplates/{templateId} {
      allow read: if request.auth != null && 
                 resource.data.accessRoles.hasAny(getUserData().roles);
      allow write: if getUserData().role == 'mainAdmin';
    }

    // Ajalugu
    match /omHistory/{historyId} {
      allow read: if getUserData().role == 'mainAdmin';
      allow write: if getUserData().role == 'mainAdmin';
    }

    // Varundused
    match /omBackups/{backupId} {
      allow read: if getUserData().role == 'mainAdmin';
      allow write: if getUserData().role == 'mainAdmin';
    }
  
    // FIELD SETTINGS
    match /fieldSettings/{docId} {
      allow read: if getUserData().role == 'mainAdmin';
      allow write: if getUserData().role == 'mainAdmin';
    }

    // BACKUP & LOGID
    match /fieldSettingsBackup/{docId} {
      allow read: if getUserData().role == 'mainAdmin';
      allow write: if getUserData().role == 'mainAdmin';
    }

    match /fieldSettingsLogs/{docId} {
      allow read: if getUserData().role == 'mainAdmin';
      allow write: if getUserData().role == 'mainAdmin';
    }
    
    match /formSettings/{document} {
      allow read: if true;
      allow write: if getUserData().role == 'mainAdmin' && hasPermission('backupSettings');
    }
   
    match /formSettingsBackup/{document} {
      allow read: if true;
      allow write: if getUserData().role == 'mainAdmin' && hasPermission('backupSettings');
    }
    
    match /purchaseForms/{document} {
      allow read: if isAuthenticated();
      allow write: if getUserData().role == 'mainAdmin';
    }
    
    // Vormimallid (formPresets)
    match /formPresets/{presetId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasPermission('createPresets');
      allow update: if isAuthenticated() && hasPermission('editPresets');
      allow delete: if isAuthenticated() && hasPermission('deletePresets');
    }
    
    match /loadPresets/{document} {
      allow read: if isAuthenticated();
      allow write: if getUserData().role == 'mainAdmin';
    }
    
    match /deletePresets/{document} {
      allow read: if isAuthenticated();
      allow write: if getUserData().role == 'mainAdmin';
    }
    
    // loadformpreset
    match /loadFormPresets/{document} {
      allow read: if isAuthenticated();
      allow write: if getUserData().role == 'mainAdmin';
    }
    
    match /editPreset/{document} {
      allow read: if isAuthenticated();
      allow write: if getUserData().role == 'mainAdmin';
    }
   
    match /formSettingsLogs/{document} {
      allow read: if true;
      allow write: if getUserData().role == 'mainAdmin';
    }

    // PDF Invitations collection
    match /pdfInvitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        getUserData().role == 'mainAdmin'
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        getUserData().role == 'mainAdmin'
      );
    }

    // Tenders collection
    match /tenders/{tenderId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        getUserData().role == 'mainAdmin'
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        getUserData().role == 'mainAdmin'
      );
    }
  }
}
